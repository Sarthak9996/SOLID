SOLID PRINCIPLES

➡️S - Single Responsibility Principle
      Each class should have only one sole purpose,
      and not to be filled with excessive functionality

➡️O - Open Closed Principle
      Classes should be open for extension,
      but closed for modification

      In simple words, for implementing new features,
      we should not have to rewrite an existing class

➡️L - Liskov Substitution Principle
      This means that every subclass or
      derived class should be substitutable for their
      base or parent class

➡️I - Interface Segregation Principle
      Interfaces should not force classes to implement
      what they can't do.
      Large interfaces should be divided into small ones

➡️D - Dependency Inversion Principle
      Components should depend on abstractions,
      not on concretions